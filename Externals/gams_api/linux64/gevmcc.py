# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gevmcc', [dirname(__file__)])
        except ImportError:
            import _gevmcc
            return _gevmcc
        if fp is not None:
            try:
                _mod = imp.load_module('_gevmcc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gevmcc = swig_import_helper()
    del swig_import_helper
else:
    import _gevmcc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


gevdoErr = _gevmcc.gevdoErr
gevdoStat = _gevmcc.gevdoStat
gevdoLog = _gevmcc.gevdoLog
gevSolverSameStreams = _gevmcc.gevSolverSameStreams
gevSolverQuiet = _gevmcc.gevSolverQuiet
gevSolverOwnFile = _gevmcc.gevSolverOwnFile
gevSolveLinkCallScript = _gevmcc.gevSolveLinkCallScript
gevSolveLinkCallModule = _gevmcc.gevSolveLinkCallModule
gevSolveLinkAsyncGrid = _gevmcc.gevSolveLinkAsyncGrid
gevSolveLinkAsyncSimulate = _gevmcc.gevSolveLinkAsyncSimulate
gevSolveLinkLoadLibrary = _gevmcc.gevSolveLinkLoadLibrary
gevAlgFileType = _gevmcc.gevAlgFileType
gevGamsVersion = _gevmcc.gevGamsVersion
gevLogOption = _gevmcc.gevLogOption
gevReform = _gevmcc.gevReform
gevIDEFlag = _gevmcc.gevIDEFlag
gevDomLim = _gevmcc.gevDomLim
gevIterLim = _gevmcc.gevIterLim
gevNodeLim = _gevmcc.gevNodeLim
gevSysOut = _gevmcc.gevSysOut
gevInteger1 = _gevmcc.gevInteger1
gevInteger2 = _gevmcc.gevInteger2
gevInteger3 = _gevmcc.gevInteger3
gevInteger4 = _gevmcc.gevInteger4
gevInteger5 = _gevmcc.gevInteger5
gevGenSolver = _gevmcc.gevGenSolver
gevCurSolver = _gevmcc.gevCurSolver
gevPageWidth = _gevmcc.gevPageWidth
gevPageSize = _gevmcc.gevPageSize
gevKeep = _gevmcc.gevKeep
gevThreadsRaw = _gevmcc.gevThreadsRaw
gevFDOpt = _gevmcc.gevFDOpt
gevOptCR = _gevmcc.gevOptCR
gevOptCA = _gevmcc.gevOptCA
gevResLim = _gevmcc.gevResLim
gevWorkSpace = _gevmcc.gevWorkSpace
gevWorkFactor = _gevmcc.gevWorkFactor
gevCutOff = _gevmcc.gevCutOff
gevUseCutOff = _gevmcc.gevUseCutOff
gevCheat = _gevmcc.gevCheat
gevUseCheat = _gevmcc.gevUseCheat
gevTryInt = _gevmcc.gevTryInt
gevReal1 = _gevmcc.gevReal1
gevReal2 = _gevmcc.gevReal2
gevReal3 = _gevmcc.gevReal3
gevReal4 = _gevmcc.gevReal4
gevReal5 = _gevmcc.gevReal5
gevHeapLimit = _gevmcc.gevHeapLimit
gevFDDelta = _gevmcc.gevFDDelta
gevNameCtrFile = _gevmcc.gevNameCtrFile
gevNameLogFile = _gevmcc.gevNameLogFile
gevNameStaFile = _gevmcc.gevNameStaFile
gevNameScrDir = _gevmcc.gevNameScrDir
gevNameGamsDate = _gevmcc.gevNameGamsDate
gevNameGamsTime = _gevmcc.gevNameGamsTime
gevNameSysDir = _gevmcc.gevNameSysDir
gevNameWrkDir = _gevmcc.gevNameWrkDir
gevNameCurDir = _gevmcc.gevNameCurDir
gevLicense1 = _gevmcc.gevLicense1
gevLicense2 = _gevmcc.gevLicense2
gevLicense3 = _gevmcc.gevLicense3
gevLicense4 = _gevmcc.gevLicense4
gevLicense5 = _gevmcc.gevLicense5
gevNameMatrix = _gevmcc.gevNameMatrix
gevNameInstr = _gevmcc.gevNameInstr
gevNameParams = _gevmcc.gevNameParams
gevNameScrExt = _gevmcc.gevNameScrExt
gevNameScenFile = _gevmcc.gevNameScenFile
gevNameExtFFile = _gevmcc.gevNameExtFFile
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gevmcc.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gevmcc.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _gevmcc.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _gevmcc.intArray___setitem__(self, *args)
    def cast(self): return _gevmcc.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _gevmcc.intArray_frompointer
    if _newclass:frompointer = staticmethod(_gevmcc.intArray_frompointer)
intArray_swigregister = _gevmcc.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _gevmcc.intArray_frompointer(*args)
intArray_frompointer = _gevmcc.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gevmcc.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gevmcc.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _gevmcc.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _gevmcc.doubleArray___setitem__(self, *args)
    def cast(self): return _gevmcc.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _gevmcc.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_gevmcc.doubleArray_frompointer)
doubleArray_swigregister = _gevmcc.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _gevmcc.doubleArray_frompointer(*args)
doubleArray_frompointer = _gevmcc.doubleArray_frompointer


def new_intp():
  return _gevmcc.new_intp()
new_intp = _gevmcc.new_intp

def copy_intp(*args):
  return _gevmcc.copy_intp(*args)
copy_intp = _gevmcc.copy_intp

def delete_intp(*args):
  return _gevmcc.delete_intp(*args)
delete_intp = _gevmcc.delete_intp

def intp_assign(*args):
  return _gevmcc.intp_assign(*args)
intp_assign = _gevmcc.intp_assign

def intp_value(*args):
  return _gevmcc.intp_value(*args)
intp_value = _gevmcc.intp_value

def new_doublep():
  return _gevmcc.new_doublep()
new_doublep = _gevmcc.new_doublep

def copy_doublep(*args):
  return _gevmcc.copy_doublep(*args)
copy_doublep = _gevmcc.copy_doublep

def delete_doublep(*args):
  return _gevmcc.delete_doublep(*args)
delete_doublep = _gevmcc.delete_doublep

def doublep_assign(*args):
  return _gevmcc.doublep_assign(*args)
doublep_assign = _gevmcc.doublep_assign

def doublep_value(*args):
  return _gevmcc.doublep_value(*args)
doublep_value = _gevmcc.doublep_value

def new_gevHandle_tp():
  return _gevmcc.new_gevHandle_tp()
new_gevHandle_tp = _gevmcc.new_gevHandle_tp

def copy_gevHandle_tp(*args):
  return _gevmcc.copy_gevHandle_tp(*args)
copy_gevHandle_tp = _gevmcc.copy_gevHandle_tp

def delete_gevHandle_tp(*args):
  return _gevmcc.delete_gevHandle_tp(*args)
delete_gevHandle_tp = _gevmcc.delete_gevHandle_tp

def gevHandle_tp_assign(*args):
  return _gevmcc.gevHandle_tp_assign(*args)
gevHandle_tp_assign = _gevmcc.gevHandle_tp_assign

def gevHandle_tp_value(*args):
  return _gevmcc.gevHandle_tp_value(*args)
gevHandle_tp_value = _gevmcc.gevHandle_tp_value

def new_Tgevlswrite_tp():
  return _gevmcc.new_Tgevlswrite_tp()
new_Tgevlswrite_tp = _gevmcc.new_Tgevlswrite_tp

def copy_Tgevlswrite_tp(*args):
  return _gevmcc.copy_Tgevlswrite_tp(*args)
copy_Tgevlswrite_tp = _gevmcc.copy_Tgevlswrite_tp

def delete_Tgevlswrite_tp(*args):
  return _gevmcc.delete_Tgevlswrite_tp(*args)
delete_Tgevlswrite_tp = _gevmcc.delete_Tgevlswrite_tp

def Tgevlswrite_tp_assign(*args):
  return _gevmcc.Tgevlswrite_tp_assign(*args)
Tgevlswrite_tp_assign = _gevmcc.Tgevlswrite_tp_assign

def Tgevlswrite_tp_value(*args):
  return _gevmcc.Tgevlswrite_tp_value(*args)
Tgevlswrite_tp_value = _gevmcc.Tgevlswrite_tp_value

def gevHandleToPtr(*args):
  """gevHandleToPtr(pgev) -> void *"""
  return _gevmcc.gevHandleToPtr(*args)

def ptrTogevHandle(*args):
  """ptrTogevHandle(vptr) -> gevHandle_t"""
  return _gevmcc.ptrTogevHandle(*args)

def gevGetReady(*args):
  """gevGetReady(msgBufSize) -> int"""
  return _gevmcc.gevGetReady(*args)

def gevGetReadyD(*args):
  """gevGetReadyD(dirName, msgBufSize) -> int"""
  return _gevmcc.gevGetReadyD(*args)

def gevGetReadyL(*args):
  """gevGetReadyL(libName, msgBufSize) -> int"""
  return _gevmcc.gevGetReadyL(*args)

def gevCreate(*args):
  """gevCreate(pgev, msgBufSize) -> int"""
  return _gevmcc.gevCreate(*args)

def gevCreateD(*args):
  """gevCreateD(pgev, dirName, msgBufSize) -> int"""
  return _gevmcc.gevCreateD(*args)

def gevCreateDD(*args):
  """gevCreateDD(pgev, dirName, msgBufSize) -> int"""
  return _gevmcc.gevCreateDD(*args)

def gevCreateL(*args):
  """gevCreateL(pgev, libName, msgBufSize) -> int"""
  return _gevmcc.gevCreateL(*args)

def gevFree(*args):
  """gevFree(pgev) -> int"""
  return _gevmcc.gevFree(*args)

def gevLibraryLoaded():
  """gevLibraryLoaded() -> int"""
  return _gevmcc.gevLibraryLoaded()

def gevLibraryUnload():
  """gevLibraryUnload() -> int"""
  return _gevmcc.gevLibraryUnload()

def gevGetScreenIndicator():
  """gevGetScreenIndicator() -> int"""
  return _gevmcc.gevGetScreenIndicator()

def gevSetScreenIndicator(*args):
  """gevSetScreenIndicator(scrind)"""
  return _gevmcc.gevSetScreenIndicator(*args)

def gevGetExceptionIndicator():
  """gevGetExceptionIndicator() -> int"""
  return _gevmcc.gevGetExceptionIndicator()

def gevSetExceptionIndicator(*args):
  """gevSetExceptionIndicator(excind)"""
  return _gevmcc.gevSetExceptionIndicator(*args)

def gevGetExitIndicator():
  """gevGetExitIndicator() -> int"""
  return _gevmcc.gevGetExitIndicator()

def gevSetExitIndicator(*args):
  """gevSetExitIndicator(extind)"""
  return _gevmcc.gevSetExitIndicator(*args)

def gevGetErrorCallback():
  """gevGetErrorCallback() -> gevErrorCallback_t"""
  return _gevmcc.gevGetErrorCallback()

def gevSetErrorCallback(*args):
  """gevSetErrorCallback(func)"""
  return _gevmcc.gevSetErrorCallback(*args)

def gevGetAPIErrorCount():
  """gevGetAPIErrorCount() -> int"""
  return _gevmcc.gevGetAPIErrorCount()

def gevSetAPIErrorCount(*args):
  """gevSetAPIErrorCount(ecnt)"""
  return _gevmcc.gevSetAPIErrorCount(*args)

def gevErrorHandling(*args):
  """gevErrorHandling(msg)"""
  return _gevmcc.gevErrorHandling(*args)

def gevRegisterWriteCallback(*args):
  """gevRegisterWriteCallback(pgev, lsw, logenabled, usrmem)"""
  return _gevmcc.gevRegisterWriteCallback(*args)

def gevCompleteEnvironment(*args):
  """gevCompleteEnvironment(pgev, palg, ivec, rvec, svec)"""
  return _gevmcc.gevCompleteEnvironment(*args)

def gevInitEnvironmentLegacy(*args):
  """gevInitEnvironmentLegacy(pgev, cntrfn) -> int"""
  return _gevmcc.gevInitEnvironmentLegacy(*args)

def gevSwitchLogStat(*args):
  """gevSwitchLogStat(pgev, lo, logfn, logappend, statfn, statappend, lsw, usrmem, lshandle) -> int"""
  return _gevmcc.gevSwitchLogStat(*args)

def gevGetLShandle(*args):
  """gevGetLShandle(pgev) -> void *"""
  return _gevmcc.gevGetLShandle(*args)

def gevRestoreLogStat(*args):
  """gevRestoreLogStat(pgev, lshandle) -> int"""
  return _gevmcc.gevRestoreLogStat(*args)

def gevRestoreLogStatRewrite(*args):
  """gevRestoreLogStatRewrite(pgev, lshandle) -> int"""
  return _gevmcc.gevRestoreLogStatRewrite(*args)

def gevLog(*args):
  """gevLog(pgev, s)"""
  return _gevmcc.gevLog(*args)

def gevLogPChar(*args):
  """gevLogPChar(pgev, p)"""
  return _gevmcc.gevLogPChar(*args)

def gevStat(*args):
  """gevStat(pgev, s)"""
  return _gevmcc.gevStat(*args)

def gevStatC(*args):
  """gevStatC(pgev, s)"""
  return _gevmcc.gevStatC(*args)

def gevStatPChar(*args):
  """gevStatPChar(pgev, p)"""
  return _gevmcc.gevStatPChar(*args)

def gevStatAudit(*args):
  """gevStatAudit(pgev, s)"""
  return _gevmcc.gevStatAudit(*args)

def gevStatCon(*args):
  """gevStatCon(pgev)"""
  return _gevmcc.gevStatCon(*args)

def gevStatCoff(*args):
  """gevStatCoff(pgev)"""
  return _gevmcc.gevStatCoff(*args)

def gevStatEOF(*args):
  """gevStatEOF(pgev)"""
  return _gevmcc.gevStatEOF(*args)

def gevStatSysout(*args):
  """gevStatSysout(pgev)"""
  return _gevmcc.gevStatSysout(*args)

def gevStatAddE(*args):
  """gevStatAddE(pgev, mi, s)"""
  return _gevmcc.gevStatAddE(*args)

def gevStatAddV(*args):
  """gevStatAddV(pgev, mj, s)"""
  return _gevmcc.gevStatAddV(*args)

def gevStatAddJ(*args):
  """gevStatAddJ(pgev, mi, mj, s)"""
  return _gevmcc.gevStatAddJ(*args)

def gevStatEject(*args):
  """gevStatEject(pgev)"""
  return _gevmcc.gevStatEject(*args)

def gevStatEdit(*args):
  """gevStatEdit(pgev, C)"""
  return _gevmcc.gevStatEdit(*args)

def gevStatE(*args):
  """gevStatE(pgev, s, mi, s2)"""
  return _gevmcc.gevStatE(*args)

def gevStatV(*args):
  """gevStatV(pgev, s, mj, s2)"""
  return _gevmcc.gevStatV(*args)

def gevStatT(*args):
  """gevStatT(pgev)"""
  return _gevmcc.gevStatT(*args)

def gevStatA(*args):
  """gevStatA(pgev, s)"""
  return _gevmcc.gevStatA(*args)

def gevStatB(*args):
  """gevStatB(pgev, s)"""
  return _gevmcc.gevStatB(*args)

def gevLogStat(*args):
  """gevLogStat(pgev, s)"""
  return _gevmcc.gevLogStat(*args)

def gevLogStatNoC(*args):
  """gevLogStatNoC(pgev, s)"""
  return _gevmcc.gevLogStatNoC(*args)

def gevLogStatPChar(*args):
  """gevLogStatPChar(pgev, p)"""
  return _gevmcc.gevLogStatPChar(*args)

def gevLogStatFlush(*args):
  """gevLogStatFlush(pgev)"""
  return _gevmcc.gevLogStatFlush(*args)

def gevGetAnchor(*args):
  """gevGetAnchor(pgev, s) -> char *"""
  return _gevmcc.gevGetAnchor(*args)

def gevStatAppend(*args):
  """gevStatAppend(pgev, statfn) -> int"""
  return _gevmcc.gevStatAppend(*args)

def gevMIPReport(*args):
  """gevMIPReport(pgev, gmoptr, fixobj, fixiter, agap, rgap)"""
  return _gevmcc.gevMIPReport(*args)

def gevGetSlvExeInfo(*args):
  """gevGetSlvExeInfo(pgev, solvername) -> int"""
  return _gevmcc.gevGetSlvExeInfo(*args)

def gevGetSlvLibInfo(*args):
  """gevGetSlvLibInfo(pgev, solvername) -> int"""
  return _gevmcc.gevGetSlvLibInfo(*args)

def gevCapabilityCheck(*args):
  """gevCapabilityCheck(pgev, modeltype, solvername, capable) -> int"""
  return _gevmcc.gevCapabilityCheck(*args)

def gevSolverVisibility(*args):
  """gevSolverVisibility(pgev, solvername, hidden, defaultok) -> int"""
  return _gevmcc.gevSolverVisibility(*args)

def gevNumSolvers(*args):
  """gevNumSolvers(pgev) -> int"""
  return _gevmcc.gevNumSolvers(*args)

def gevGetSolver(*args):
  """gevGetSolver(pgev, modeltype) -> char *"""
  return _gevmcc.gevGetSolver(*args)

def gevGetCurrentSolver(*args):
  """gevGetCurrentSolver(pgev, gmoptr) -> char *"""
  return _gevmcc.gevGetCurrentSolver(*args)

def gevGetSolverDefault(*args):
  """gevGetSolverDefault(pgev, modeltype) -> char *"""
  return _gevmcc.gevGetSolverDefault(*args)

def gevSolver2Id(*args):
  """gevSolver2Id(pgev, solvername) -> int"""
  return _gevmcc.gevSolver2Id(*args)

def gevId2Solver(*args):
  """gevId2Solver(pgev, solverid) -> char *"""
  return _gevmcc.gevId2Solver(*args)

def gevCallSolverNextGridDir(*args):
  """gevCallSolverNextGridDir(pgev) -> char *"""
  return _gevmcc.gevCallSolverNextGridDir(*args)

def gevCallSolver(*args):
  """
    gevCallSolver(pgev, gmoptr, cntrfn, solvername, solvelink, Logging, logfn, statfn, reslim, iterlim, 
        domlim, optcr, optca, jobhandle) -> int
    """
  return _gevmcc.gevCallSolver(*args)

def gevCallSolverHandleStatus(*args):
  """gevCallSolverHandleStatus(pgev, jobhandle) -> int"""
  return _gevmcc.gevCallSolverHandleStatus(*args)

def gevCallSolverHandleDelete(*args):
  """gevCallSolverHandleDelete(pgev, jobhandle) -> int"""
  return _gevmcc.gevCallSolverHandleDelete(*args)

def gevCallSolverHandleCollect(*args):
  """gevCallSolverHandleCollect(pgev, jobhandle, gmoptr) -> int"""
  return _gevmcc.gevCallSolverHandleCollect(*args)

def gevGetIntOpt(*args):
  """gevGetIntOpt(pgev, optname) -> int"""
  return _gevmcc.gevGetIntOpt(*args)

def gevGetDblOpt(*args):
  """gevGetDblOpt(pgev, optname) -> double"""
  return _gevmcc.gevGetDblOpt(*args)

def gevGetStrOpt(*args):
  """gevGetStrOpt(pgev, optname) -> char *"""
  return _gevmcc.gevGetStrOpt(*args)

def gevSetIntOpt(*args):
  """gevSetIntOpt(pgev, optname, ival)"""
  return _gevmcc.gevSetIntOpt(*args)

def gevSetDblOpt(*args):
  """gevSetDblOpt(pgev, optname, rval)"""
  return _gevmcc.gevSetDblOpt(*args)

def gevSetStrOpt(*args):
  """gevSetStrOpt(pgev, optname, sval)"""
  return _gevmcc.gevSetStrOpt(*args)

def gevSynchronizeOpt(*args):
  """gevSynchronizeOpt(pgev, optptr)"""
  return _gevmcc.gevSynchronizeOpt(*args)

def gevTimeJNow(*args):
  """gevTimeJNow(pgev) -> double"""
  return _gevmcc.gevTimeJNow(*args)

def gevTimeDiff(*args):
  """gevTimeDiff(pgev) -> double"""
  return _gevmcc.gevTimeDiff(*args)

def gevTimeDiffStart(*args):
  """gevTimeDiffStart(pgev) -> double"""
  return _gevmcc.gevTimeDiffStart(*args)

def gevTimeSetStart(*args):
  """gevTimeSetStart(pgev)"""
  return _gevmcc.gevTimeSetStart(*args)

def gevTerminateUninstall(*args):
  """gevTerminateUninstall(pgev)"""
  return _gevmcc.gevTerminateUninstall(*args)

def gevTerminateInstall(*args):
  """gevTerminateInstall(pgev)"""
  return _gevmcc.gevTerminateInstall(*args)

def gevTerminateSet(*args):
  """gevTerminateSet(pgev, intr, ehdler)"""
  return _gevmcc.gevTerminateSet(*args)

def gevTerminateGet(*args):
  """gevTerminateGet(pgev) -> int"""
  return _gevmcc.gevTerminateGet(*args)

def gevTerminateClear(*args):
  """gevTerminateClear(pgev)"""
  return _gevmcc.gevTerminateClear(*args)

def gevTerminateRaise(*args):
  """gevTerminateRaise(pgev)"""
  return _gevmcc.gevTerminateRaise(*args)

def gevTerminateGetHandler(*args):
  """gevTerminateGetHandler(pgev, intr, ehdler)"""
  return _gevmcc.gevTerminateGetHandler(*args)

def gevGetScratchName(*args):
  """gevGetScratchName(pgev, s) -> char *"""
  return _gevmcc.gevGetScratchName(*args)

def gevWriteModelInstance(*args):
  """gevWriteModelInstance(pgev, mifn, gmoptr, INOUT) -> int"""
  return _gevmcc.gevWriteModelInstance(*args)

def gevDuplicateScratchDir(*args):
  """gevDuplicateScratchDir(pgev, scrdir, logfn) -> int"""
  return _gevmcc.gevDuplicateScratchDir(*args)

def gevInitJacLegacy(*args):
  """gevInitJacLegacy(pgev, evalptr, gmoptr) -> int"""
  return _gevmcc.gevInitJacLegacy(*args)

def gevSetColRowPermLegacy(*args):
  """gevSetColRowPermLegacy(pgev, evalptr, n, cgms2slv, m, rgms2slv)"""
  return _gevmcc.gevSetColRowPermLegacy(*args)

def gevSetJacPermLegacy(*args):
  """gevSetJacPermLegacy(pgev, evalptr, njacs, jacs, jgms2slv)"""
  return _gevmcc.gevSetJacPermLegacy(*args)

def gevEvalNewPointLegacy(*args):
  """gevEvalNewPointLegacy(pgev, evalptr, x) -> int"""
  return _gevmcc.gevEvalNewPointLegacy(*args)

def gevEvalJacLegacy(*args):
  """gevEvalJacLegacy(pgev, evalptr, si, x, INOUT, jac, INOUT, INOUT) -> int"""
  return _gevmcc.gevEvalJacLegacy(*args)

def gevEvalJacLegacyX(*args):
  """gevEvalJacLegacyX(pgev, evalptr, cnt, rowidx, x, fvec, jac, INOUT, INOUT) -> int"""
  return _gevmcc.gevEvalJacLegacyX(*args)

def gevNextNLLegacy(*args):
  """gevNextNLLegacy(pgev, evalptr, si) -> int"""
  return _gevmcc.gevNextNLLegacy(*args)

def gevRowGms2SlvLegacy(*args):
  """gevRowGms2SlvLegacy(pgev, evalptr, si) -> int"""
  return _gevmcc.gevRowGms2SlvLegacy(*args)

def gevFreeJacLegacy(*args):
  """gevFreeJacLegacy(pgev, evalptr)"""
  return _gevmcc.gevFreeJacLegacy(*args)

def gevGetALGX(*args):
  """gevGetALGX(pgev) -> void *"""
  return _gevmcc.gevGetALGX(*args)

def gevSkipIOLegacySet(*args):
  """gevSkipIOLegacySet(pgev, x)"""
  return _gevmcc.gevSkipIOLegacySet(*args)

def gevThreads(*args):
  """gevThreads(pgev) -> int"""
  return _gevmcc.gevThreads(*args)
GLOBAL_MAX_INDEX_DIM = _gevmcc.GLOBAL_MAX_INDEX_DIM
GLOBAL_UEL_IDENT_SIZE = _gevmcc.GLOBAL_UEL_IDENT_SIZE
ITERLIM_INFINITY = _gevmcc.ITERLIM_INFINITY
GMS_MAX_INDEX_DIM = _gevmcc.GMS_MAX_INDEX_DIM
GMS_UEL_IDENT_SIZE = _gevmcc.GMS_UEL_IDENT_SIZE
GMS_SSSIZE = _gevmcc.GMS_SSSIZE
GMS_VARTYPE_UNKNOWN = _gevmcc.GMS_VARTYPE_UNKNOWN
GMS_VARTYPE_BINARY = _gevmcc.GMS_VARTYPE_BINARY
GMS_VARTYPE_INTEGER = _gevmcc.GMS_VARTYPE_INTEGER
GMS_VARTYPE_POSITIVE = _gevmcc.GMS_VARTYPE_POSITIVE
GMS_VARTYPE_NEGATIVE = _gevmcc.GMS_VARTYPE_NEGATIVE
GMS_VARTYPE_FREE = _gevmcc.GMS_VARTYPE_FREE
GMS_VARTYPE_SOS1 = _gevmcc.GMS_VARTYPE_SOS1
GMS_VARTYPE_SOS2 = _gevmcc.GMS_VARTYPE_SOS2
GMS_VARTYPE_SEMICONT = _gevmcc.GMS_VARTYPE_SEMICONT
GMS_VARTYPE_SEMIINT = _gevmcc.GMS_VARTYPE_SEMIINT
GMS_VARTYPE_MAX = _gevmcc.GMS_VARTYPE_MAX
GMS_EQUTYPE_E = _gevmcc.GMS_EQUTYPE_E
GMS_EQUTYPE_G = _gevmcc.GMS_EQUTYPE_G
GMS_EQUTYPE_L = _gevmcc.GMS_EQUTYPE_L
GMS_EQUTYPE_N = _gevmcc.GMS_EQUTYPE_N
GMS_EQUTYPE_X = _gevmcc.GMS_EQUTYPE_X
GMS_EQUTYPE_C = _gevmcc.GMS_EQUTYPE_C
GMS_EQUTYPE_MAX = _gevmcc.GMS_EQUTYPE_MAX
GMS_VAL_LEVEL = _gevmcc.GMS_VAL_LEVEL
GMS_VAL_MARGINAL = _gevmcc.GMS_VAL_MARGINAL
GMS_VAL_LOWER = _gevmcc.GMS_VAL_LOWER
GMS_VAL_UPPER = _gevmcc.GMS_VAL_UPPER
GMS_VAL_SCALE = _gevmcc.GMS_VAL_SCALE
GMS_VAL_MAX = _gevmcc.GMS_VAL_MAX
sv_valund = _gevmcc.sv_valund
sv_valna = _gevmcc.sv_valna
sv_valpin = _gevmcc.sv_valpin
sv_valmin = _gevmcc.sv_valmin
sv_valeps = _gevmcc.sv_valeps
sv_normal = _gevmcc.sv_normal
sv_acronym = _gevmcc.sv_acronym
GMS_SVIDX_UNDEF = _gevmcc.GMS_SVIDX_UNDEF
GMS_SVIDX_NA = _gevmcc.GMS_SVIDX_NA
GMS_SVIDX_PINF = _gevmcc.GMS_SVIDX_PINF
GMS_SVIDX_MINF = _gevmcc.GMS_SVIDX_MINF
GMS_SVIDX_EPS = _gevmcc.GMS_SVIDX_EPS
GMS_SVIDX_NORMAL = _gevmcc.GMS_SVIDX_NORMAL
GMS_SVIDX_ACR = _gevmcc.GMS_SVIDX_ACR
GMS_SVIDX_MAX = _gevmcc.GMS_SVIDX_MAX
dt_set = _gevmcc.dt_set
dt_par = _gevmcc.dt_par
dt_var = _gevmcc.dt_var
dt_equ = _gevmcc.dt_equ
dt_alias = _gevmcc.dt_alias
GMS_DT_SET = _gevmcc.GMS_DT_SET
GMS_DT_PAR = _gevmcc.GMS_DT_PAR
GMS_DT_VAR = _gevmcc.GMS_DT_VAR
GMS_DT_EQU = _gevmcc.GMS_DT_EQU
GMS_DT_ALIAS = _gevmcc.GMS_DT_ALIAS
GMS_DT_MAX = _gevmcc.GMS_DT_MAX
GMS_SV_UNDEF = _gevmcc.GMS_SV_UNDEF
GMS_SV_NA = _gevmcc.GMS_SV_NA
GMS_SV_PINF = _gevmcc.GMS_SV_PINF
GMS_SV_MINF = _gevmcc.GMS_SV_MINF
GMS_SV_EPS = _gevmcc.GMS_SV_EPS
GMS_SV_ACR = _gevmcc.GMS_SV_ACR
GMS_SV_NAINT = _gevmcc.GMS_SV_NAINT
# This file is compatible with both classic and new-style classes.


